/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-20 05:42:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- jquery CDM -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js\"></script>\r\n");
      out.write("<!-- jquery -->\r\n");
      out.write("<script>\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		$(\"#passwd2\").on(\"keyup\", function(){\r\n");
      out.write("			var passwd = $(\"#passwd\").val(); // input tage이기 때문에 val로 값 가져옴\r\n");
      out.write("			var passwd2 = $(\"#passwd2\").val();\r\n");
      out.write("			var mesg = \"비번 일치\";\r\n");
      out.write("			if(passwd != passwd2) {\r\n");
      out.write("				mesg=\"비번 불일치\";\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			$(\"#idcheck\").text(mesg); // spane태그에 값을 넣어줌\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// id 중복체크\r\n");
      out.write("		$(\"#idDupulicatedcheck\").on(\"click\", function(){\r\n");
      out.write("			// button은 기본적으로 form태그 안에서 submit처럼 동작함 => submit 비활성화 필요\r\n");
      out.write("			event.preventDefault() // submit 비활성화\r\n");
      out.write("			//ajax 연동\r\n");
      out.write("			$.ajax({\r\n");
      out.write("                // 요청코드\r\n");
      out.write("                type:\"get\", // MemberIdCheckServlet으로 doget방식으로 url넘겨줌\r\n");
      out.write("                url:\"MemberIdCheckServlet\", // 버튼 눌렀을 때 이동할 곳 정하기\r\n");
      out.write("                data:{\r\n");
      out.write("                    userid:$(\"#userid\").val() // MemberIdCheckServlet으로 넘겨줄 값 : userid값\r\n");
      out.write("                },\r\n");
      out.write("\r\n");
      out.write("                // 응답코드\r\n");
      out.write("                dataType:'text', // 응답받을 데이터 타입\r\n");
      out.write("                success:function(data, satatus, xhr) { // 성공했을 때 data변수에 MemberIdCheckServlet에서 넘어온 값(mesg) 저장\r\n");
      out.write("                    console.log(data);\r\n");
      out.write("                    $(\"#result\").text(data); // id값이 result인 span태그에 값 넣어줌 -> 사용자에게 출력됨\r\n");
      out.write("                },\r\n");
      out.write("                error:function(xhr, status, error) {\r\n");
      out.write("                    console.log(\"에러발생\");\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		// 모든 회원정보가 입력된 후 submit 되도록 만들기\r\n");
      out.write("		$(\"form\").on(\"submit\", function() {\r\n");
      out.write("			var userid = $(\"#userid\").val();\r\n");
      out.write("			var passwd = $(\"#passwd\").val();\r\n");
      out.write("			var passwd2 = $(\"#passwd2\").val();\r\n");
      out.write("			var username = $(\"#username\").val();\r\n");
      out.write("			var sample4_postcode = $(\"#sample4_postcode\").val();\r\n");
      out.write("			var sample4_roadAddress = $(\"#sample4_roadAddress\").val();\r\n");
      out.write("			var sample4_jibunAddress = $(\"#sample4_jibunAddress\").val();\r\n");
      out.write("			var phone2 = $(\"#phone2\").val();\r\n");
      out.write("			var phone3 = $(\"#phone3\").val();\r\n");
      out.write("			var email1 = $(\"#email1\").val();\r\n");
      out.write("			var email2 = $(\"#email2\").val();\r\n");
      out.write("			\r\n");
      out.write("			if(userid.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"ID는 필수 기입 사항\");\r\n");
      out.write("		        $(\"#userid\").focus();\r\n");
      out.write("			}\r\n");
      out.write("			else if(passwd.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"비밀번호는 필수 기입 사항\");\r\n");
      out.write("		        $(\"#passwd\").focus();\r\n");
      out.write("			}\r\n");
      out.write("			else if(passwd2.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"비밀번호 검사를 해주세요\");\r\n");
      out.write("		        $(\"#passwd2\").focus();\r\n");
      out.write("			}\r\n");
      out.write("			else if(username.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"이름은 필수 기입 사항\");\r\n");
      out.write("		        $(\"#username\").focus();\r\n");
      out.write("			}\r\n");
      out.write("			else if(sample4_postcode.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"주소는 필수 기입 사항\");\r\n");
      out.write("			}\r\n");
      out.write("			else if(sample4_roadAddress.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"주소는 필수 기입 사항\")\r\n");
      out.write("			}\r\n");
      out.write("			else if(sample4_jibunAddress.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"주소는 필수 기입 사항\");\r\n");
      out.write("			}\r\n");
      out.write("			else if(phone2.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"핸드폰 번호는 필수 기입 사항\");\r\n");
      out.write("		        $(\"#phone2\").focus();\r\n");
      out.write("			}\r\n");
      out.write("			else if(phone3.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"핸드폰 번호는 필수 기입 사항\");\r\n");
      out.write("		        $(\"#phone3\").focus();\r\n");
      out.write("			}\r\n");
      out.write("			else if(email1.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"이메일은 필수 기입 사항\");\r\n");
      out.write("		        $(\"#email1\").focus();\r\n");
      out.write("			}\r\n");
      out.write("			else if(email2.length == 0) {\r\n");
      out.write("				event.preventDefault()\r\n");
      out.write("		        alert(\"이메일은 필수 기입 사항\");\r\n");
      out.write("		        $(\"#email2\").focus();\r\n");
      out.write("			}\r\n");
      out.write("				\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<form action=\"MemberAddServlet\" method=\"post\">\r\n");
      out.write("*아이디:<input type=\"text\" name=\"userid\" id=\"userid\">\r\n");
      out.write("<button id=\"idDupulicatedcheck\">중복확인</button><span id=\"result\"></span><br>\r\n");
      out.write("*비밀번호:<input type=\"text\" name=\"passwd\" id=\"passwd\"><br>\r\n");
      out.write("*비밀번호확인:<input type=\"text\" name=\"passwd2\" id=\"passwd2\"><span id=\"idcheck\"></span><br>\r\n");
      out.write("*이름:<input type=\"text\" name=\"username\" id=\"username\"><br>\r\n");
      out.write("\r\n");
      out.write("<!-- kakao address API --> <!-- 제공된 API에는 name속성이 없으니 추가해줌 -->\r\n");
      out.write("<input type=\"text\" name=\"post\" id=\"sample4_postcode\" placeholder=\"우편번호\">\r\n");
      out.write("<input type=\"button\" onclick=\"sample4_execDaumPostcode()\" value=\"우편번호 찾기\"><br>\r\n");
      out.write("<input type=\"text\" name=\"addr1\" id=\"sample4_roadAddress\" placeholder=\"도로명주소\">\r\n");
      out.write("<input type=\"text\" name=\"addr2\" id=\"sample4_jibunAddress\" placeholder=\"지번주소\">\r\n");
      out.write("<span id=\"guide\" style=\"color:#999\"></span>\r\n");
      out.write("<br>\r\n");
      out.write("<!-- kakao address API -->\r\n");
      out.write("\r\n");
      out.write("전화번호:\r\n");
      out.write("<select name=\"phone1\">\r\n");
      out.write("	<option value=\"010\">010</option>\r\n");
      out.write("	<option value=\"011\">011</option>\r\n");
      out.write("</select>-\r\n");
      out.write("<input type=\"text\" name=\"phone2\" id=\"phone2\">-\r\n");
      out.write("<input type=\"text\" name=\"phone3\" id=\"phone3\"><br>\r\n");
      out.write("이메일:\r\n");
      out.write("<input type=\"text\" name=\"email1\" id=\"email1\">@<input type=\"text\" name=\"email2\" id=\"email2\" placeholder=\"직접입력\">\r\n");
      out.write("<select>\r\n");
      out.write("	<option value=\"daum.net\">daum.net</option>\r\n");
      out.write("	<option value=\"google.com\">google.com</option>\r\n");
      out.write("	<option value=\"naver.com\">naver.com</option>\r\n");
      out.write("</select><br>\r\n");
      out.write("<input type=\"submit\" value=\"회원가입\">\r\n");
      out.write("<input type=\"reset\" value=\"취소\">\r\n");
      out.write("\r\n");
      out.write("<!-- kakao address API script -->\r\n");
      out.write("<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("    //본 예제에서는 도로명 주소 표기 방식에 대한 법령에 따라, 내려오는 데이터를 조합하여 올바른 주소를 구성하는 방법을 설명합니다.\r\n");
      out.write("    function sample4_execDaumPostcode() {\r\n");
      out.write("        new daum.Postcode({\r\n");
      out.write("            oncomplete: function(data) {\r\n");
      out.write("                // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("                // 도로명 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("                var fullRoadAddr = data.roadAddress; // 도로명 주소 변수\r\n");
      out.write("                var extraRoadAddr = ''; // 도로명 조합형 주소 변수\r\n");
      out.write("\r\n");
      out.write("                // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("                // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("                if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n");
      out.write("                    extraRoadAddr += data.bname;\r\n");
      out.write("                }\r\n");
      out.write("                // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("                if(data.buildingName !== '' && data.apartment === 'Y'){\r\n");
      out.write("                   extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                }\r\n");
      out.write("                // 도로명, 지번 조합형 주소가 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("                if(extraRoadAddr !== ''){\r\n");
      out.write("                    extraRoadAddr = ' (' + extraRoadAddr + ')';\r\n");
      out.write("                }\r\n");
      out.write("                // 도로명, 지번 주소의 유무에 따라 해당 조합형 주소를 추가한다.\r\n");
      out.write("                if(fullRoadAddr !== ''){\r\n");
      out.write("                    fullRoadAddr += extraRoadAddr;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("                document.getElementById('sample4_postcode').value = data.zonecode; //5자리 새우편번호 사용\r\n");
      out.write("                document.getElementById('sample4_roadAddress').value = fullRoadAddr;\r\n");
      out.write("                document.getElementById('sample4_jibunAddress').value = data.jibunAddress;\r\n");
      out.write("\r\n");
      out.write("                // 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.\r\n");
      out.write("                if(data.autoRoadAddress) {\r\n");
      out.write("                    //예상되는 도로명 주소에 조합형 주소를 추가한다.\r\n");
      out.write("                    var expRoadAddr = data.autoRoadAddress + extraRoadAddr;\r\n");
      out.write("                    document.getElementById('guide').innerHTML = '(예상 도로명 주소 : ' + expRoadAddr + ')';\r\n");
      out.write("\r\n");
      out.write("                } else if(data.autoJibunAddress) {\r\n");
      out.write("                    var expJibunAddr = data.autoJibunAddress;\r\n");
      out.write("                    document.getElementById('guide').innerHTML = '(예상 지번 주소 : ' + expJibunAddr + ')';\r\n");
      out.write("\r\n");
      out.write("                } else {\r\n");
      out.write("                    document.getElementById('guide').innerHTML = '';\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }).open();\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("<!-- kakao address API script -->\r\n");
      out.write("\r\n");
      out.write("</form>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
